Index: src/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\n\npublic class User {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/User.java b/src/model/User.java
--- a/src/model/User.java	(revision 7a02a0ffefdf32a06ab1c3daf556706c2dc2e823)
+++ b/src/model/User.java	(date 1619520899183)
@@ -1,5 +1,82 @@
 package model;
 
+import model.card.Card;
+import model.deck.Deck;
+
+import java.util.ArrayList;
+
 public class User {
+    private static ArrayList<User> users = new ArrayList<>();
+
+    private String username;
+    private String password;
+    private String nickname;
+    private Integer score;
+    private ArrayList<Card> cards = new ArrayList<>();
+    private ArrayList<Deck> decks = new ArrayList<>();
+
+    User(String username, String password, String nickname) {
+        this.username = username;
+        this.password = password;
+        this.nickname = nickname;
+        users.add(this);
+    }
+
+    public static User getUserByUsername(String username) {
+        for (User user : users)
+            if (user.getUsername().equals(username))
+                return user;
+        return null;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public Integer getScore() {
+        return score;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
 
+    public void increaseScore(Integer value) {
+        score += value;
+    }
+
+    public void decreaseScore(Integer value) {
+        score -= value;
+    }
+
+    public Deck getDeckByName(String deckName) {
+        for (Deck deck : decks)
+            if (deck.getName().equals(deckName))
+                return deck;
+        return null;
+    }
+
+    public void addDeck(Deck deck) {
+        decks.add(deck);
+    }
+
+    public void deleteDeck(Deck deck) {
+        decks.removeIf(deck1 -> deck1.equals(deck));
+    }
 }
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 7a02a0ffefdf32a06ab1c3daf556706c2dc2e823)
+++ b/src/Main.java	(date 1619514706814)
@@ -1,5 +1,5 @@
 public class Main {
     public static void main(String[] args) {
-        System.out.println("Hello World!");
+
     }
 }
Index: src/model/deck/MainDeck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/deck/MainDeck.java b/src/model/deck/MainDeck.java
new file mode 100644
--- /dev/null	(date 1619520899175)
+++ b/src/model/deck/MainDeck.java	(date 1619520899175)
@@ -0,0 +1,12 @@
+package model.deck;
+
+import model.deck.BaseDeck;
+
+public class MainDeck extends BaseDeck {
+    private final Integer minimumNumberOfCards = 15;
+    private final Integer maximumNumberOfCards = 45;
+
+    public boolean isValid() {
+        return minimumNumberOfCards <= cards.size() && cards.size() <= maximumNumberOfCards;
+    }
+}
Index: src/model/deck/BaseDeck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/deck/BaseDeck.java b/src/model/deck/BaseDeck.java
new file mode 100644
--- /dev/null	(date 1619520899213)
+++ b/src/model/deck/BaseDeck.java	(date 1619520899213)
@@ -0,0 +1,36 @@
+package model.deck;
+
+import model.card.Card;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Random;
+
+public class BaseDeck {
+    protected ArrayList<Card> cards;
+
+    public Card getTopCard() {
+        if (!cards.isEmpty())
+            return cards.get(cards.size() - 1);
+        return null;
+    }
+
+    public void shuffleCards() {
+        Collections.shuffle(cards, new Random(System.nanoTime()));
+    }
+
+    public void addCard(Card card) {
+        cards.add(card);
+    }
+
+    public void removeCard(Card card) {
+        cards.removeIf(card1 -> card1.equals(card));
+    }
+
+    @Override
+    public String toString() { // TODO
+        return "BaseDeck{" +
+                "cards=" + cards +
+                '}';
+    }
+}
Index: src/model/card/Card.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/card/Card.java b/src/model/card/Card.java
new file mode 100644
--- /dev/null	(date 1619520821089)
+++ b/src/model/card/Card.java	(date 1619520821089)
@@ -0,0 +1,34 @@
+package model.card;
+
+public abstract class Card {
+    protected String name;
+    protected String description;
+    protected Integer level;
+    protected Integer speed;
+
+    public String getName() {
+        return name;
+    }
+
+    public Integer getLevel() {
+        return level;
+    }
+
+    public Integer getSpeed() {
+        return speed;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    @Override
+    public String toString() { // TODO
+        return "Card{" +
+                "name='" + name + '\'' +
+                ", description='" + description + '\'' +
+                ", level=" + level +
+                ", speed=" + speed +
+                '}';
+    }
+}
Index: src/model/deck/Deck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/deck/Deck.java b/src/model/deck/Deck.java
new file mode 100644
--- /dev/null	(date 1619520899198)
+++ b/src/model/deck/Deck.java	(date 1619520899198)
@@ -0,0 +1,32 @@
+package model.deck;
+
+import model.deck.MainDeck;
+import model.deck.SideDeck;
+
+public class Deck {
+    private String name;
+    private MainDeck mainDeck;
+    private SideDeck sideDeck;
+
+    Deck(String name) {
+        this.name = name;
+        mainDeck = new MainDeck();
+        sideDeck = new SideDeck();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public MainDeck getMainDeck() {
+        return mainDeck;
+    }
+
+    public SideDeck getSideDeck() {
+        return sideDeck;
+    }
+}
Index: src/model/enums/Phase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/enums/Phase.java b/src/model/enums/Phase.java
new file mode 100644
--- /dev/null	(date 1619523958068)
+++ b/src/model/enums/Phase.java	(date 1619523958068)
@@ -0,0 +1,5 @@
+package model.enums;
+
+public enum Phase {
+
+}
Index: src/model/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Game.java b/src/model/Game.java
new file mode 100644
--- /dev/null	(date 1619524274849)
+++ b/src/model/Game.java	(date 1619524274849)
@@ -0,0 +1,54 @@
+package model;
+
+import model.card.Card;
+import model.enums.*;
+
+public class Game {
+    private Player firstPlayer;
+    private Player secondPlayer;
+    private boolean turn = false;
+    private Phase phase;
+    private Card selectedCard;
+
+    public Phase getPhase() {
+        return phase;
+    }
+
+    public Card getCardByCardAddress(CardAddress cardAddress) {
+
+    }
+
+    public Card getSelectedCard() {
+        return selectedCard;
+    }
+
+    public Player getCurrentPlayer() {
+        if (!turn)
+            return firstPlayer;
+        else
+            return secondPlayer;
+    }
+
+    public Player getOpponentPlayer() {
+        if (!turn)
+            return secondPlayer;
+        else
+            return firstPlayer;
+    }
+
+    public void selectCard(CardAddress cardAddress) {
+
+    }
+
+    public void unselectCard(CardAddress cardAddress) {
+
+    }
+
+    public boolean isCardSelected() {
+        return selectedCard != null;
+    }
+
+    void changeTurn() {
+        turn = !turn;
+    }
+}
Index: src/model/card/Trap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/card/Trap.java b/src/model/card/Trap.java
new file mode 100644
--- /dev/null	(date 1619521429872)
+++ b/src/model/card/Trap.java	(date 1619521429872)
@@ -0,0 +1,4 @@
+package model.card;
+
+public class Trap extends Card{
+}
Index: src/model/CardAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/CardAddress.java b/src/model/CardAddress.java
new file mode 100644
--- /dev/null	(date 1619523319431)
+++ b/src/model/CardAddress.java	(date 1619523319431)
@@ -0,0 +1,13 @@
+package model;
+
+public class CardAddress {
+    private boolean isInField;
+    private boolean isInMonsterZone;
+    private boolean isInSpellZone;
+    private boolean isInHand;
+    private Integer id;
+
+    public CardAddress cardAddressParser(String text) {
+
+    }
+}
Index: src/model/card/Monster.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/card/Monster.java b/src/model/card/Monster.java
new file mode 100644
--- /dev/null	(date 1619523928545)
+++ b/src/model/card/Monster.java	(date 1619523928545)
@@ -0,0 +1,11 @@
+package model.card;
+
+import model.enums.State;
+
+public class Monster extends Card{
+    protected Integer attackDamage;
+    protected Integer defenseRate;
+    protected String attribute;
+    protected String type;
+    private State state;
+}
Index: src/model/card/Spell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/card/Spell.java b/src/model/card/Spell.java
new file mode 100644
--- /dev/null	(date 1619521429879)
+++ b/src/model/card/Spell.java	(date 1619521429879)
@@ -0,0 +1,5 @@
+package model.card;
+
+public class Spell extends Card{
+
+}
Index: src/model/enums/State.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/enums/State.java b/src/model/enums/State.java
new file mode 100644
--- /dev/null	(date 1619523928556)
+++ b/src/model/enums/State.java	(date 1619523928556)
@@ -0,0 +1,7 @@
+package model.enums;
+
+public enum State {
+    DEFENSIVEHIDDEN,
+    DEFENSIVEOCCUPIED,
+    OFFENSIVEOCCUPIED
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1619518540730)
+++ b/.idea/uiDesigner.xml	(date 1619518540730)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/model/enums/Icon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/enums/Icon.java b/src/model/enums/Icon.java
new file mode 100644
--- /dev/null	(date 1619523928494)
+++ b/src/model/enums/Icon.java	(date 1619523928494)
@@ -0,0 +1,10 @@
+package model.enums;
+
+public enum Icon {
+    EQUIP,
+    FIELD,
+    QUICKPLAY,
+    RITUAL,
+    CONTINUOUS,
+    COUNTER
+}
Index: src/controller/LoginMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\n\npublic class LoginMenu {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/LoginMenu.java b/src/controller/LoginMenu.java
--- a/src/controller/LoginMenu.java	(revision 7a02a0ffefdf32a06ab1c3daf556706c2dc2e823)
+++ b/src/controller/LoginMenu.java	(date 1619514706831)
@@ -1,4 +1,5 @@
-package controller;
+package Controller;
 
 public class LoginMenu {
+    public static 
 }
Index: src/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Board.java b/src/model/Board.java
new file mode 100644
--- /dev/null	(date 1619523420390)
+++ b/src/model/Board.java	(date 1619523420390)
@@ -0,0 +1,47 @@
+package model;
+
+import model.card.Card;
+import model.card.Monster;
+import model.deck.MainDeck;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class Board {
+    private MainDeck mainDeck;
+    private List<Card> graveYard = new ArrayList<>();
+    private Map<Integer, Card> monsterCardZone = new HashMap<>();
+    private Map<Integer, Card> spellAndTrapCardZone = new HashMap<>();
+    private Map<Integer, Card> cardsOnHand = new HashMap<>();
+
+    public CardAddress getCardAddressByCard(Card card) {
+
+    }
+
+    public List<Card> getAllCardsOnField() {
+
+    }
+
+    public void addCardToBoard(Card card, CardAddress cardAddress) {
+
+    }
+
+    public void moveCardToGraveYard(CardAddress cardAddress) {
+
+    }
+
+    public void summonMonster(Monster monsterCard) {
+
+    }
+
+    public boolean isMonsterCardZoneFull() {
+        return monsterCardZone.size() == 5;
+    }
+
+    public void finishTurn() {
+
+    }
+
+}
Index: src/model/deck/SideDeck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/deck/SideDeck.java b/src/model/deck/SideDeck.java
new file mode 100644
--- /dev/null	(date 1619520899161)
+++ b/src/model/deck/SideDeck.java	(date 1619520899161)
@@ -0,0 +1,12 @@
+package model.deck;
+
+import model.deck.BaseDeck;
+
+public class SideDeck extends BaseDeck {
+    private final Integer minimumNumberOfCards = 0;
+    private final Integer maximumNumberOfCards = 15;
+
+    public boolean isValid() {
+        return minimumNumberOfCards <= cards.size() && cards.size() <= maximumNumberOfCards;
+    }
+}
Index: src/controller/BaseMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\n\npublic class BaseMenu {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/BaseMenu.java b/src/controller/BaseMenu.java
--- a/src/controller/BaseMenu.java	(revision 7a02a0ffefdf32a06ab1c3daf556706c2dc2e823)
+++ b/src/controller/BaseMenu.java	(date 1619514706844)
@@ -1,4 +1,11 @@
-package controller;
+package Controller;
+
+public abstract class BaseMenu {
+    public abstract void showCurrentMenu();
 
-public class BaseMenu {
-}
+    public abstract void navigateToMenu(String menu);
+
+    public abstract void exit();
+
+    public abstract void programControl();
+}
\ No newline at end of file
Index: src/model/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Player.java b/src/model/Player.java
new file mode 100644
--- /dev/null	(date 1619523750453)
+++ b/src/model/Player.java	(date 1619523750453)
@@ -0,0 +1,41 @@
+package model;
+
+import model.deck.*;
+
+public class Player {
+    private User user;
+    private Deck deck;
+    private Board board;
+    private Integer lifePoint;
+
+    public User getUser() {
+        return user;
+    }
+
+    public MainDeck getMainDeck() {
+        return deck.getMainDeck();
+    }
+
+    public SideDeck getSideDeck() {
+        return deck.getSideDeck();
+    }
+
+    public Board getBoard() {
+        return board;
+    }
+
+    public Integer getLifePoint() {
+        return lifePoint;
+    }
+
+    public void increaseLifePoint(Integer value) {
+        this.lifePoint += value;
+    }
+    
+    public void decreaseLifePoint(Integer value) {
+        this.lifePoint -= value;
+    }
+    
+
+
+}
